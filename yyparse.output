Terminals unused in grammar

   TOK_ROOT
   TOK_FIELD
   TOK_CALL
   TOK_RETURNVOID
   TOK_INDEX
   TOK_NEWARRAY
   TOK_NEWSTRING
   TOK_BLOCK
   TOK_DECLID
   TOK_FUNCTION
   TOK_IFELSE
   TOK_PROTOTYPE
   TOK_VARDECL
   TOK_PARAMLIST
   TOK_INTCON
   TOK_CHARCON
   TOK_STRINGCON


State 14 conflicts: 1 reduce/reduce
State 42 conflicts: 1 reduce/reduce
State 43 conflicts: 1 reduce/reduce
State 118 conflicts: 18 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error ';'
    6        | program error '}'
    7        | /* empty */

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}'
    9          | TOK_STRUCT TOK_IDENT '{' structrepeat '}'

   10 structrepeat: structrepeat fielddecl ';'
   11             | fielddecl ';'

   12 fielddecl: basetype TOK_IDENT
   13          | basetype TOK_ARRAY TOK_IDENT

   14 basetype: TOK_VOID
   15         | TOK_INT
   16         | TOK_STRING
   17         | TOK_TYPEID
   18         | TOK_IDENT

   19 function: identdecl '(' ')' block
   20         | identdecl '(' functionrepeat ')' ';'

   21 functionrepeat: functionrepeat ',' identdecl
   22               | identdecl

   23 identdecl: basetype TOK_IDENT
   24          | basetype TOK_ARRAY TOK_IDENT

   25 block: '{' '}'
   26      | '{' blockrepeat '}'

   27 blockrepeat: blockrepeat statement
   28            | statement

   29 statement: block
   30          | vardecl
   31          | while
   32          | ifelse
   33          | return
   34          | expr ';'

   35 vardecl: identdecl '=' expr ';'

   36 while: TOK_WHILE '(' expr ')' statement

   37 ifelse: TOK_IF '(' expr ')' statement
   38       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   39 return: TOK_RETURN ';'
   40       | TOK_RETURN expr ';'

   41 expr: binoperation
   42     | unoperation
   43     | allocator
   44     | call
   45     | '(' expr ')'
   46     | variable
   47     | constant

   48 binoperation: expr '+' expr
   49             | expr '-' expr
   50             | expr '*' expr
   51             | expr '/' expr
   52             | expr '%' expr
   53             | expr '=' expr
   54             | expr TOK_EQ expr
   55             | expr TOK_NE expr
   56             | expr TOK_GT expr
   57             | expr TOK_LT expr
   58             | expr TOK_GE expr
   59             | expr TOK_LE expr

   60 unoperation: '+' expr
   61            | '-' expr
   62            | '!' expr
   63            | TOK_NEW expr

   64 allocator: TOK_NEW TOK_IDENT '(' ')'
   65          | TOK_NEW TOK_STRING '(' expr ')'
   66          | TOK_NEW basetype '[' expr ']'

   67 call: TOK_IDENT '(' ')'
   68     | TOK_IDENT '(' callrepeat ')'

   69 callrepeat: callrepeat ',' expr
   70           | expr

   71 variable: TOK_IDENT
   72         | expr '[' expr ']'
   73         | expr '.' TOK_IDENT

   74 constant: TOK_INT
   75         | TOK_CHAR
   76         | TOK_STRING
   77         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 62
'%' (37) 52
'(' (40) 19 20 36 37 38 45 64 65 67 68
')' (41) 19 20 36 37 38 45 64 65 67 68
'*' (42) 50
'+' (43) 48 60
',' (44) 21 69
'-' (45) 49 61
'.' (46) 73
'/' (47) 51
';' (59) 5 10 11 20 34 35 39 40
'=' (61) 35 53
'[' (91) 66 72
']' (93) 66 72
'{' (123) 8 9 25 26
'}' (125) 6 8 9 25 26
error (256) 5 6
TOK_ROOT (258)
TOK_IDENT (259) 8 9 12 13 18 23 24 64 67 68 71 73
TOK_FIELD (260)
TOK_TYPEID (261) 17
TOK_POS (262)
TOK_NEG (263)
TOK_CALL (264)
TOK_NEW (265) 63 64 65 66
TOK_RETURN (266) 39 40
TOK_RETURNVOID (267)
TOK_STRUCT (268) 8 9
TOK_ARRAY (269) 13 24
TOK_VOID (270) 14
TOK_NULL (271) 77
TOK_STRING (272) 16 65 76
TOK_CHAR (273) 75
TOK_INT (274) 15 74
TOK_INDEX (275)
TOK_NEWARRAY (276)
TOK_NEWSTRING (277)
TOK_LE (278) 59
TOK_NE (279) 55
TOK_BLOCK (280)
TOK_DECLID (281)
TOK_FUNCTION (282)
TOK_IFELSE (283)
TOK_PROTOTYPE (284)
TOK_VARDECL (285)
TOK_EQ (286) 54
TOK_GT (287) 56
TOK_GE (288) 58
TOK_ELSE (289) 38
TOK_IF (290) 37 38
TOK_PARAMLIST (291)
TOK_WHILE (292) 36
TOK_INTCON (293)
TOK_CHARCON (294)
TOK_STRINGCON (295)
TOK_LT (296) 57


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
start (59)
    on left: 1, on right: 0
program (60)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (61)
    on left: 8 9, on right: 2
structrepeat (62)
    on left: 10 11, on right: 9 10
fielddecl (63)
    on left: 12 13, on right: 10 11
basetype (64)
    on left: 14 15 16 17 18, on right: 12 13 23 24 66
function (65)
    on left: 19 20, on right: 3
functionrepeat (66)
    on left: 21 22, on right: 20 21
identdecl (67)
    on left: 23 24, on right: 19 20 21 22 35
block (68)
    on left: 25 26, on right: 19 29
blockrepeat (69)
    on left: 27 28, on right: 26 27
statement (70)
    on left: 29 30 31 32 33 34, on right: 4 27 28 36 37 38
vardecl (71)
    on left: 35, on right: 30
while (72)
    on left: 36, on right: 31
ifelse (73)
    on left: 37 38, on right: 32
return (74)
    on left: 39 40, on right: 33
expr (75)
    on left: 41 42 43 44 45 46 47, on right: 34 35 36 37 38 40 45 48
    49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 69 70 72 73
binoperation (76)
    on left: 48 49 50 51 52 53 54 55 56 57 58 59, on right: 41
unoperation (77)
    on left: 60 61 62 63, on right: 42
allocator (78)
    on left: 64 65 66, on right: 43
call (79)
    on left: 67 68, on right: 44
callrepeat (80)
    on left: 69 70, on right: 68 69
variable (81)
    on left: 71 72 73, on right: 46
constant (82)
    on left: 74 75 76 77, on right: 47


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error ';'
    6        | program . error '}'

    error       shift, and go to state 4
    TOK_IDENT   shift, and go to state 5
    TOK_TYPEID  shift, and go to state 6
    TOK_NEW     shift, and go to state 7
    TOK_RETURN  shift, and go to state 8
    TOK_STRUCT  shift, and go to state 9
    TOK_VOID    shift, and go to state 10
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 14
    TOK_IF      shift, and go to state 15
    TOK_WHILE   shift, and go to state 16
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20
    '{'         shift, and go to state 21

    $end  reduce using rule 1 (start)

    structdef     go to state 22
    basetype      go to state 23
    function      go to state 24
    identdecl     go to state 25
    block         go to state 26
    statement     go to state 27
    vardecl       go to state 28
    while         go to state 29
    ifelse        go to state 30
    return        go to state 31
    expr          go to state 32
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . ';'
    6        | program error . '}'

    ';'  shift, and go to state 39
    '}'  shift, and go to state 40


State 5

   18 basetype: TOK_IDENT .
   67 call: TOK_IDENT . '(' ')'
   68     | TOK_IDENT . '(' callrepeat ')'
   71 variable: TOK_IDENT .

    '('  shift, and go to state 41

    TOK_IDENT  reduce using rule 18 (basetype)
    TOK_ARRAY  reduce using rule 18 (basetype)
    $default   reduce using rule 71 (variable)


State 6

   17 basetype: TOK_TYPEID .

    $default  reduce using rule 17 (basetype)


State 7

   63 unoperation: TOK_NEW . expr
   64 allocator: TOK_NEW . TOK_IDENT '(' ')'
   65          | TOK_NEW . TOK_STRING '(' expr ')'
   66          | TOK_NEW . basetype '[' expr ']'

    TOK_IDENT   shift, and go to state 42
    TOK_TYPEID  shift, and go to state 6
    TOK_NEW     shift, and go to state 7
    TOK_VOID    shift, and go to state 10
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 43
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 14
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    basetype      go to state 44
    expr          go to state 45
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 8

   39 return: TOK_RETURN . ';'
   40       | TOK_RETURN . expr ';'

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20
    ';'         shift, and go to state 49

    expr          go to state 50
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 9

    8 structdef: TOK_STRUCT . TOK_IDENT '{' '}'
    9          | TOK_STRUCT . TOK_IDENT '{' structrepeat '}'

    TOK_IDENT  shift, and go to state 51


State 10

   14 basetype: TOK_VOID .

    $default  reduce using rule 14 (basetype)


State 11

   77 constant: TOK_NULL .

    $default  reduce using rule 77 (constant)


State 12

   16 basetype: TOK_STRING .
   76 constant: TOK_STRING .

    TOK_IDENT  reduce using rule 16 (basetype)
    TOK_ARRAY  reduce using rule 16 (basetype)
    $default   reduce using rule 76 (constant)


State 13

   75 constant: TOK_CHAR .

    $default  reduce using rule 75 (constant)


State 14

   15 basetype: TOK_INT .
   74 constant: TOK_INT .

    TOK_IDENT  reduce using rule 15 (basetype)
    TOK_ARRAY  reduce using rule 15 (basetype)
    '['        reduce using rule 15 (basetype)
    '['        [reduce using rule 74 (constant)]
    $default   reduce using rule 74 (constant)


State 15

   37 ifelse: TOK_IF . '(' expr ')' statement
   38       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 52


State 16

   36 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 53


State 17

   60 unoperation: '+' . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 54
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 18

   61 unoperation: '-' . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 55
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 19

   62 unoperation: '!' . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 56
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 20

   45 expr: '(' . expr ')'

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 57
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 21

   25 block: '{' . '}'
   26      | '{' . blockrepeat '}'

    TOK_IDENT   shift, and go to state 5
    TOK_TYPEID  shift, and go to state 6
    TOK_NEW     shift, and go to state 7
    TOK_RETURN  shift, and go to state 8
    TOK_VOID    shift, and go to state 10
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 14
    TOK_IF      shift, and go to state 15
    TOK_WHILE   shift, and go to state 16
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20
    '}'         shift, and go to state 58
    '{'         shift, and go to state 21

    basetype      go to state 23
    identdecl     go to state 59
    block         go to state 26
    blockrepeat   go to state 60
    statement     go to state 61
    vardecl       go to state 28
    while         go to state 29
    ifelse        go to state 30
    return        go to state 31
    expr          go to state 32
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 22

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 23

   23 identdecl: basetype . TOK_IDENT
   24          | basetype . TOK_ARRAY TOK_IDENT

    TOK_IDENT  shift, and go to state 62
    TOK_ARRAY  shift, and go to state 63


State 24

    3 program: program function .

    $default  reduce using rule 3 (program)


State 25

   19 function: identdecl . '(' ')' block
   20         | identdecl . '(' functionrepeat ')' ';'
   35 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 64
    '('  shift, and go to state 65


State 26

   29 statement: block .

    $default  reduce using rule 29 (statement)


State 27

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 28

   30 statement: vardecl .

    $default  reduce using rule 30 (statement)


State 29

   31 statement: while .

    $default  reduce using rule 31 (statement)


State 30

   32 statement: ifelse .

    $default  reduce using rule 32 (statement)


State 31

   33 statement: return .

    $default  reduce using rule 33 (statement)


State 32

   34 statement: expr . ';'
   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_LE  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_EQ  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    TOK_LT  shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '.'     shift, and go to state 78
    '['     shift, and go to state 79
    ';'     shift, and go to state 80


State 33

   41 expr: binoperation .

    $default  reduce using rule 41 (expr)


State 34

   42 expr: unoperation .

    $default  reduce using rule 42 (expr)


State 35

   43 expr: allocator .

    $default  reduce using rule 43 (expr)


State 36

   44 expr: call .

    $default  reduce using rule 44 (expr)


State 37

   46 expr: variable .

    $default  reduce using rule 46 (expr)


State 38

   47 expr: constant .

    $default  reduce using rule 47 (expr)


State 39

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 40

    6 program: program error '}' .

    $default  reduce using rule 6 (program)


State 41

   67 call: TOK_IDENT '(' . ')'
   68     | TOK_IDENT '(' . callrepeat ')'

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20
    ')'         shift, and go to state 81

    expr          go to state 82
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    callrepeat    go to state 83
    variable      go to state 37
    constant      go to state 38


State 42

   18 basetype: TOK_IDENT .
   64 allocator: TOK_NEW TOK_IDENT . '(' ')'
   67 call: TOK_IDENT . '(' ')'
   68     | TOK_IDENT . '(' callrepeat ')'
   71 variable: TOK_IDENT .

    '('  shift, and go to state 84

    '['       reduce using rule 18 (basetype)
    '['       [reduce using rule 71 (variable)]
    $default  reduce using rule 71 (variable)


State 43

   16 basetype: TOK_STRING .
   65 allocator: TOK_NEW TOK_STRING . '(' expr ')'
   76 constant: TOK_STRING .

    '('  shift, and go to state 85

    '['       reduce using rule 16 (basetype)
    '['       [reduce using rule 76 (constant)]
    $default  reduce using rule 76 (constant)


State 44

   66 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 86


State 45

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   63 unoperation: TOK_NEW expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 63 (unoperation)


State 46

   67 call: TOK_IDENT . '(' ')'
   68     | TOK_IDENT . '(' callrepeat ')'
   71 variable: TOK_IDENT .

    '('  shift, and go to state 41

    $default  reduce using rule 71 (variable)


State 47

   76 constant: TOK_STRING .

    $default  reduce using rule 76 (constant)


State 48

   74 constant: TOK_INT .

    $default  reduce using rule 74 (constant)


State 49

   39 return: TOK_RETURN ';' .

    $default  reduce using rule 39 (return)


State 50

   40 return: TOK_RETURN expr . ';'
   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_LE  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_EQ  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    TOK_LT  shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '.'     shift, and go to state 78
    '['     shift, and go to state 79
    ';'     shift, and go to state 87


State 51

    8 structdef: TOK_STRUCT TOK_IDENT . '{' '}'
    9          | TOK_STRUCT TOK_IDENT . '{' structrepeat '}'

    '{'  shift, and go to state 88


State 52

   37 ifelse: TOK_IF '(' . expr ')' statement
   38       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 89
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 53

   36 while: TOK_WHILE '(' . expr ')' statement

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 90
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 54

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   60 unoperation: '+' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 60 (unoperation)


State 55

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   61 unoperation: '-' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 61 (unoperation)


State 56

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   62 unoperation: '!' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 62 (unoperation)


State 57

   45 expr: '(' expr . ')'
   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_LE  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_EQ  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    TOK_LT  shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '.'     shift, and go to state 78
    '['     shift, and go to state 79
    ')'     shift, and go to state 91


State 58

   25 block: '{' '}' .

    $default  reduce using rule 25 (block)


State 59

   35 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 64


State 60

   26 block: '{' blockrepeat . '}'
   27 blockrepeat: blockrepeat . statement

    TOK_IDENT   shift, and go to state 5
    TOK_TYPEID  shift, and go to state 6
    TOK_NEW     shift, and go to state 7
    TOK_RETURN  shift, and go to state 8
    TOK_VOID    shift, and go to state 10
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 14
    TOK_IF      shift, and go to state 15
    TOK_WHILE   shift, and go to state 16
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20
    '}'         shift, and go to state 92
    '{'         shift, and go to state 21

    basetype      go to state 23
    identdecl     go to state 59
    block         go to state 26
    statement     go to state 93
    vardecl       go to state 28
    while         go to state 29
    ifelse        go to state 30
    return        go to state 31
    expr          go to state 32
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 61

   28 blockrepeat: statement .

    $default  reduce using rule 28 (blockrepeat)


State 62

   23 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 23 (identdecl)


State 63

   24 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 94


State 64

   35 vardecl: identdecl '=' . expr ';'

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 95
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 65

   19 function: identdecl '(' . ')' block
   20         | identdecl '(' . functionrepeat ')' ';'

    TOK_IDENT   shift, and go to state 96
    TOK_TYPEID  shift, and go to state 6
    TOK_VOID    shift, and go to state 10
    TOK_STRING  shift, and go to state 97
    TOK_INT     shift, and go to state 98
    ')'         shift, and go to state 99

    basetype        go to state 23
    functionrepeat  go to state 100
    identdecl       go to state 101


State 66

   59 binoperation: expr TOK_LE . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 102
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 67

   55 binoperation: expr TOK_NE . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 103
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 68

   54 binoperation: expr TOK_EQ . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 104
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 69

   56 binoperation: expr TOK_GT . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 105
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 70

   58 binoperation: expr TOK_GE . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 106
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 71

   53 binoperation: expr '=' . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 107
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 72

   57 binoperation: expr TOK_LT . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 108
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 73

   48 binoperation: expr '+' . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 109
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 74

   49 binoperation: expr '-' . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 110
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 75

   50 binoperation: expr '*' . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 111
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 76

   51 binoperation: expr '/' . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 112
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 77

   52 binoperation: expr '%' . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 113
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 78

   73 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 114


State 79

   72 variable: expr '[' . expr ']'

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 115
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 80

   34 statement: expr ';' .

    $default  reduce using rule 34 (statement)


State 81

   67 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 67 (call)


State 82

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   70 callrepeat: expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_LE  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_EQ  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    TOK_LT  shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '.'     shift, and go to state 78
    '['     shift, and go to state 79

    $default  reduce using rule 70 (callrepeat)


State 83

   68 call: TOK_IDENT '(' callrepeat . ')'
   69 callrepeat: callrepeat . ',' expr

    ')'  shift, and go to state 116
    ','  shift, and go to state 117


State 84

   64 allocator: TOK_NEW TOK_IDENT '(' . ')'
   67 call: TOK_IDENT '(' . ')'
   68     | TOK_IDENT '(' . callrepeat ')'

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20
    ')'         shift, and go to state 118

    expr          go to state 82
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    callrepeat    go to state 83
    variable      go to state 37
    constant      go to state 38


State 85

   65 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 119
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 86

   66 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 120
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 87

   40 return: TOK_RETURN expr ';' .

    $default  reduce using rule 40 (return)


State 88

    8 structdef: TOK_STRUCT TOK_IDENT '{' . '}'
    9          | TOK_STRUCT TOK_IDENT '{' . structrepeat '}'

    TOK_IDENT   shift, and go to state 96
    TOK_TYPEID  shift, and go to state 6
    TOK_VOID    shift, and go to state 10
    TOK_STRING  shift, and go to state 97
    TOK_INT     shift, and go to state 98
    '}'         shift, and go to state 121

    structrepeat  go to state 122
    fielddecl     go to state 123
    basetype      go to state 124


State 89

   37 ifelse: TOK_IF '(' expr . ')' statement
   38       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_LE  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_EQ  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    TOK_LT  shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '.'     shift, and go to state 78
    '['     shift, and go to state 79
    ')'     shift, and go to state 125


State 90

   36 while: TOK_WHILE '(' expr . ')' statement
   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_LE  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_EQ  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    TOK_LT  shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '.'     shift, and go to state 78
    '['     shift, and go to state 79
    ')'     shift, and go to state 126


State 91

   45 expr: '(' expr ')' .

    $default  reduce using rule 45 (expr)


State 92

   26 block: '{' blockrepeat '}' .

    $default  reduce using rule 26 (block)


State 93

   27 blockrepeat: blockrepeat statement .

    $default  reduce using rule 27 (blockrepeat)


State 94

   24 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 24 (identdecl)


State 95

   35 vardecl: identdecl '=' expr . ';'
   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_LE  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_EQ  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    TOK_LT  shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '.'     shift, and go to state 78
    '['     shift, and go to state 79
    ';'     shift, and go to state 127


State 96

   18 basetype: TOK_IDENT .

    $default  reduce using rule 18 (basetype)


State 97

   16 basetype: TOK_STRING .

    $default  reduce using rule 16 (basetype)


State 98

   15 basetype: TOK_INT .

    $default  reduce using rule 15 (basetype)


State 99

   19 function: identdecl '(' ')' . block

    '{'  shift, and go to state 21

    block  go to state 128


State 100

   20 function: identdecl '(' functionrepeat . ')' ';'
   21 functionrepeat: functionrepeat . ',' identdecl

    ')'  shift, and go to state 129
    ','  shift, and go to state 130


State 101

   22 functionrepeat: identdecl .

    $default  reduce using rule 22 (functionrepeat)


State 102

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   59             | expr TOK_LE expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74
    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 59 (binoperation)


State 103

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   55             | expr TOK_NE expr .
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74
    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 55 (binoperation)


State 104

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   54             | expr TOK_EQ expr .
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74
    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 54 (binoperation)


State 105

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   56             | expr TOK_GT expr .
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74
    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 56 (binoperation)


State 106

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   58             | expr TOK_GE expr .
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74
    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 58 (binoperation)


State 107

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   53             | expr '=' expr .
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_LE  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_EQ  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    TOK_LT  shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '.'     shift, and go to state 78
    '['     shift, and go to state 79

    $default  reduce using rule 53 (binoperation)


State 108

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   57             | expr TOK_LT expr .
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74
    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 57 (binoperation)


State 109

   48 binoperation: expr . '+' expr
   48             | expr '+' expr .
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 48 (binoperation)


State 110

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   49             | expr '-' expr .
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 49 (binoperation)


State 111

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   50             | expr '*' expr .
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 50 (binoperation)


State 112

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   51             | expr '/' expr .
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 51 (binoperation)


State 113

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   52             | expr '%' expr .
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 78
    '['  shift, and go to state 79

    $default  reduce using rule 52 (binoperation)


State 114

   73 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 73 (variable)


State 115

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   72 variable: expr . '[' expr ']'
   72         | expr '[' expr . ']'
   73         | expr . '.' TOK_IDENT

    TOK_LE  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_EQ  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    TOK_LT  shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '.'     shift, and go to state 78
    '['     shift, and go to state 79
    ']'     shift, and go to state 131


State 116

   68 call: TOK_IDENT '(' callrepeat ')' .

    $default  reduce using rule 68 (call)


State 117

   69 callrepeat: callrepeat ',' . expr

    TOK_IDENT   shift, and go to state 46
    TOK_NEW     shift, and go to state 7
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 47
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 48
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20

    expr          go to state 132
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 118

   64 allocator: TOK_NEW TOK_IDENT '(' ')' .
   67 call: TOK_IDENT '(' ')' .

    TOK_LE    reduce using rule 64 (allocator)
    TOK_LE    [reduce using rule 67 (call)]
    TOK_NE    reduce using rule 64 (allocator)
    TOK_NE    [reduce using rule 67 (call)]
    TOK_EQ    reduce using rule 64 (allocator)
    TOK_EQ    [reduce using rule 67 (call)]
    TOK_GT    reduce using rule 64 (allocator)
    TOK_GT    [reduce using rule 67 (call)]
    TOK_GE    reduce using rule 64 (allocator)
    TOK_GE    [reduce using rule 67 (call)]
    '='       reduce using rule 64 (allocator)
    '='       [reduce using rule 67 (call)]
    TOK_LT    reduce using rule 64 (allocator)
    TOK_LT    [reduce using rule 67 (call)]
    '+'       reduce using rule 64 (allocator)
    '+'       [reduce using rule 67 (call)]
    '-'       reduce using rule 64 (allocator)
    '-'       [reduce using rule 67 (call)]
    '*'       reduce using rule 64 (allocator)
    '*'       [reduce using rule 67 (call)]
    '/'       reduce using rule 64 (allocator)
    '/'       [reduce using rule 67 (call)]
    '%'       reduce using rule 64 (allocator)
    '%'       [reduce using rule 67 (call)]
    '.'       reduce using rule 64 (allocator)
    '.'       [reduce using rule 67 (call)]
    '['       reduce using rule 64 (allocator)
    '['       [reduce using rule 67 (call)]
    ';'       reduce using rule 64 (allocator)
    ';'       [reduce using rule 67 (call)]
    ')'       reduce using rule 64 (allocator)
    ')'       [reduce using rule 67 (call)]
    ','       reduce using rule 64 (allocator)
    ','       [reduce using rule 67 (call)]
    ']'       reduce using rule 64 (allocator)
    ']'       [reduce using rule 67 (call)]
    $default  reduce using rule 64 (allocator)


State 119

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   65 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_LE  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_EQ  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    TOK_LT  shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '.'     shift, and go to state 78
    '['     shift, and go to state 79
    ')'     shift, and go to state 133


State 120

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   66 allocator: TOK_NEW basetype '[' expr . ']'
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_LE  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_EQ  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    TOK_LT  shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '.'     shift, and go to state 78
    '['     shift, and go to state 79
    ']'     shift, and go to state 134


State 121

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 8 (structdef)


State 122

    9 structdef: TOK_STRUCT TOK_IDENT '{' structrepeat . '}'
   10 structrepeat: structrepeat . fielddecl ';'

    TOK_IDENT   shift, and go to state 96
    TOK_TYPEID  shift, and go to state 6
    TOK_VOID    shift, and go to state 10
    TOK_STRING  shift, and go to state 97
    TOK_INT     shift, and go to state 98
    '}'         shift, and go to state 135

    fielddecl  go to state 136
    basetype   go to state 124


State 123

   11 structrepeat: fielddecl . ';'

    ';'  shift, and go to state 137


State 124

   12 fielddecl: basetype . TOK_IDENT
   13          | basetype . TOK_ARRAY TOK_IDENT

    TOK_IDENT  shift, and go to state 138
    TOK_ARRAY  shift, and go to state 139


State 125

   37 ifelse: TOK_IF '(' expr ')' . statement
   38       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_IDENT   shift, and go to state 5
    TOK_TYPEID  shift, and go to state 6
    TOK_NEW     shift, and go to state 7
    TOK_RETURN  shift, and go to state 8
    TOK_VOID    shift, and go to state 10
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 14
    TOK_IF      shift, and go to state 15
    TOK_WHILE   shift, and go to state 16
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20
    '{'         shift, and go to state 21

    basetype      go to state 23
    identdecl     go to state 59
    block         go to state 26
    statement     go to state 140
    vardecl       go to state 28
    while         go to state 29
    ifelse        go to state 30
    return        go to state 31
    expr          go to state 32
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 126

   36 while: TOK_WHILE '(' expr ')' . statement

    TOK_IDENT   shift, and go to state 5
    TOK_TYPEID  shift, and go to state 6
    TOK_NEW     shift, and go to state 7
    TOK_RETURN  shift, and go to state 8
    TOK_VOID    shift, and go to state 10
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 14
    TOK_IF      shift, and go to state 15
    TOK_WHILE   shift, and go to state 16
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20
    '{'         shift, and go to state 21

    basetype      go to state 23
    identdecl     go to state 59
    block         go to state 26
    statement     go to state 141
    vardecl       go to state 28
    while         go to state 29
    ifelse        go to state 30
    return        go to state 31
    expr          go to state 32
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 127

   35 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 35 (vardecl)


State 128

   19 function: identdecl '(' ')' block .

    $default  reduce using rule 19 (function)


State 129

   20 function: identdecl '(' functionrepeat ')' . ';'

    ';'  shift, and go to state 142


State 130

   21 functionrepeat: functionrepeat ',' . identdecl

    TOK_IDENT   shift, and go to state 96
    TOK_TYPEID  shift, and go to state 6
    TOK_VOID    shift, and go to state 10
    TOK_STRING  shift, and go to state 97
    TOK_INT     shift, and go to state 98

    basetype   go to state 23
    identdecl  go to state 143


State 131

   72 variable: expr '[' expr ']' .

    $default  reduce using rule 72 (variable)


State 132

   48 binoperation: expr . '+' expr
   49             | expr . '-' expr
   50             | expr . '*' expr
   51             | expr . '/' expr
   52             | expr . '%' expr
   53             | expr . '=' expr
   54             | expr . TOK_EQ expr
   55             | expr . TOK_NE expr
   56             | expr . TOK_GT expr
   57             | expr . TOK_LT expr
   58             | expr . TOK_GE expr
   59             | expr . TOK_LE expr
   69 callrepeat: callrepeat ',' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_LE  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_EQ  shift, and go to state 68
    TOK_GT  shift, and go to state 69
    TOK_GE  shift, and go to state 70
    '='     shift, and go to state 71
    TOK_LT  shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '.'     shift, and go to state 78
    '['     shift, and go to state 79

    $default  reduce using rule 69 (callrepeat)


State 133

   65 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 65 (allocator)


State 134

   66 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 66 (allocator)


State 135

    9 structdef: TOK_STRUCT TOK_IDENT '{' structrepeat '}' .

    $default  reduce using rule 9 (structdef)


State 136

   10 structrepeat: structrepeat fielddecl . ';'

    ';'  shift, and go to state 144


State 137

   11 structrepeat: fielddecl ';' .

    $default  reduce using rule 11 (structrepeat)


State 138

   12 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 139

   13 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 145


State 140

   37 ifelse: TOK_IF '(' expr ')' statement .
   38       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 146

    $default  reduce using rule 37 (ifelse)


State 141

   36 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 36 (while)


State 142

   20 function: identdecl '(' functionrepeat ')' ';' .

    $default  reduce using rule 20 (function)


State 143

   21 functionrepeat: functionrepeat ',' identdecl .

    $default  reduce using rule 21 (functionrepeat)


State 144

   10 structrepeat: structrepeat fielddecl ';' .

    $default  reduce using rule 10 (structrepeat)


State 145

   13 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 13 (fielddecl)


State 146

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_IDENT   shift, and go to state 5
    TOK_TYPEID  shift, and go to state 6
    TOK_NEW     shift, and go to state 7
    TOK_RETURN  shift, and go to state 8
    TOK_VOID    shift, and go to state 10
    TOK_NULL    shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_CHAR    shift, and go to state 13
    TOK_INT     shift, and go to state 14
    TOK_IF      shift, and go to state 15
    TOK_WHILE   shift, and go to state 16
    '+'         shift, and go to state 17
    '-'         shift, and go to state 18
    '!'         shift, and go to state 19
    '('         shift, and go to state 20
    '{'         shift, and go to state 21

    basetype      go to state 23
    identdecl     go to state 59
    block         go to state 26
    statement     go to state 147
    vardecl       go to state 28
    while         go to state 29
    ifelse        go to state 30
    return        go to state 31
    expr          go to state 32
    binoperation  go to state 33
    unoperation   go to state 34
    allocator     go to state 35
    call          go to state 36
    variable      go to state 37
    constant      go to state 38


State 147

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 38 (ifelse)
